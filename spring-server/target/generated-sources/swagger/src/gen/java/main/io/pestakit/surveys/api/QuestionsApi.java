/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.pestakit.surveys.api;

import io.pestakit.surveys.model.Error;
import io.pestakit.surveys.model.Question;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-10T10:14:34.627+01:00")

@Api(value = "questions", description = "the questions API")
public interface QuestionsApi {

    @ApiOperation(value = "", notes = "Create a question", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Void.class) })
    
    @RequestMapping(value = "/questions",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createQuestion(@ApiParam(value = "The question to be created" ,required=true )  @Valid @RequestBody Question question);


    @ApiOperation(value = "", notes = "Returns the identified question", response = Question.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Question.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    
    @RequestMapping(value = "/questions/{id_question}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Question> findQuestionById(@ApiParam(value = "ID of question to fetch",required=true ) @PathVariable("id_question") Long idQuestion);


    @ApiOperation(value = "All the questions", notes = "", response = Question.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Question.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    
    @RequestMapping(value = "/questions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Question>> questionsGet();

}
